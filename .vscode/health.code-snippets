{
  // Place your Health workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Insert Proprties {getter,setter}": {
    "scope": "rust",
    "prefix": "properties",
    "body": [
      "fn properties() -> &'static [glib::ParamSpec] {",
      "    use once_cell::sync::Lazy;",
      "    static PROPERTIES: Lazy<Vec<glib::ParamSpec>> = Lazy::new(|| {",
      "        vec![",
      "        ]",
      "    });",
      "",
      "    PROPERTIES.as_ref()",
      "}",
      "",
      "fn set_property(&self, _obj: &Self::Type, _id: usize, value: &glib::Value, pspec: &glib::ParamSpec) {",
      "    match pspec.name() {",
      "        _ => unimplemented!(),",
      "    }",
      "}",
      "",
      "fn property(&self, _obj: &Self::Type, _id: usize, pspec: &glib::ParamSpec) -> glib::Value {",
      "    match pspec.name() {",
      "        _ => unimplemented!(),",
      "    }",
      "}"
    ],
    "description": "Log output to console"
  }
}
