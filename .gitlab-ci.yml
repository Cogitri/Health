include: "https://gitlab.gnome.org/GNOME/citemplates/raw/master/flatpak/flatpak_ci_initiative.yml"

variables:
  BUNDLE: "dev.Cogitri.Health.Devel.flatpak"
  MANIFEST_PATH: "dev.Cogitri.Health.Devel.json"
  FLATPAK_MODULE: "health"
  FLATPAK_IMAGE: "registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:master"
  TARBALL: "dev.Cogitri.Health-${CI_COMMIT_TAG}.tar.xz"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/release-tarballs/${CI_COMMIT_TAG}"

.flatpak_cache_template: &flatpak_cache
  cache:
    key: "flatpak"
    paths:
      - .flatpak-builder/cache/
      - _build/

stages:
  - qa
  - build
  - deploy
  - release-tarball
  - release-upload
  - release-fix-url
  - release-publish

lint:
  image: valalang/lint
  stage: qa
  script:
    - io.elementary.vala-lint --config .vala-lint.conf src

flatpak:
  extends: ".flatpak"
  stage: build
  image: "$FLATPAK_IMAGE"
  variables:
    RUNTIME_REPO: "https://nightly.gnome.org/gnome-nightly.flatpakrepo"
    APP_ID: "dev.Cogitri.Health.Devel"

flatpak-non-null:
  image: "$FLATPAK_IMAGE"
  stage: build
  tags:
    - flatpak
  script:
    - flatpak-builder --disable-rofiles-fuse --stop-at=${FLATPAK_MODULE} --force-clean app ${MANIFEST_PATH}
    - flatpak-builder --disable-rofiles-fuse --run app ${MANIFEST_PATH} env VALAC_FLAGS="--enable-experimental-non-null" meson _build
    - flatpak-builder --disable-rofiles-fuse --run app ${MANIFEST_PATH} ninja -C _build
    - flatpak-builder --disable-rofiles-fuse --run app ${MANIFEST_PATH} env LANG="en_GB.UTF-8" meson test -v -C _build

nightly:
  stage: deploy
  extends: ".publish_nightly"
  dependencies: ["flatpak"]
  needs: ["flatpak"]

pages:
  image: alpine:edge
  stage: deploy
  before_script:
    - apk add --no-cache vala gtk4.0-dev libgee-dev tracker-dev meson build-base git gobject-introspection-dev libsoup-dev rest-dev json-glib-dev libsecret-dev curl
    - git clone https://gitlab.gnome.org/exalm/libhandy -b gtk4
    - cd libhandy
    - meson build
    - meson install -C build
    - curl https://gitlab.gnome.org/GNOME/vala/-/raw/master/vapi/gtk4.vapi -o /usr/share/vala-0.50/vapi/gtk4.vapi
    - cd ..
  script:
    - meson -Ddocs=true build
    - meson compile -C build
    - rm -rf public
    - mv build/docs/ public
  artifacts:
    paths:
      - public
  only:
    - master

create-dist-tarball:
  stage: release-tarball
  image: alpine:edge
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - apk add --no-cache vala gtk4.0-dev libgee-dev tracker-dev meson build-base git gobject-introspection-dev libsoup-dev rest-dev json-glib-dev libsecret-dev curl
    - git clone https://gitlab.gnome.org/exalm/libhandy -b gtk4
    - cd libhandy
    - meson build
    - meson install -C build
    - curl https://gitlab.gnome.org/GNOME/vala/-/raw/master/vapi/gtk4.vapi -o /usr/share/vala-0.50/vapi/gtk4.vapi
    - cd ..
  script:
    - meson build
    - env LANG="en_GB.UTF-8" meson dist --include-subprojects -C build
  artifacts:
    paths:
      - build/meson-dist/
    expire_in: 5 mins


upload-dist-tarball:
  stage: release-upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/meson-dist/${TARBALL} ${PACKAGE_REGISTRY_URL}/${TARBALL}

# https://gitlab.com/gitlab-org/gitlab/-/issues/271534 The default URL needs authentication right now, which is less than optimal...
# Get the package_files ID instead and use that as download URL in the "release" step.
no-auth-url-job:
  stage: release-fix-url
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - apk add curl jq
    -  |
      export PACKAGE_ID=$(curl --header "PRIVATE-TOKEN: ${GITLAB_SECRET_API_KEY}" "https://gitlab.gnome.org/api/v4/projects/${CI_PROJECT_ID}/packages?sort=desc" | jq -c .[0].id)
    -  |
      export PACKAGE_DOWNLOAD_ID=$(curl --header "PRIVATE-TOKEN: ${GITLAB_SECRET_API_KEY}" "https://gitlab.gnome.org/api/v4/projects/${CI_PROJECT_ID}/packages/${PACKAGE_ID}/package_files" | jq -c .[0].id)
    - echo "https://gitlab.gnome.org/Cogitri/gnome-health/-/package_files/$PACKAGE_DOWNLOAD_ID/download" > download_url
  artifacts:
    paths:
      - download_url
    expire_in: 5 mins

release:
  stage: release-publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      export PACKAGE_DOWNLOAD_URL=$(cat download_url) \
      && release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --description "Please use the attached tarball \"${TARBALL}\", which includes the required vala-unit submodule folder and can be used to build Health without an internet connection." \
        --assets-link "{\"name\":\"${TARBALL}\",\"url\":\"${PACKAGE_DOWNLOAD_URL}\"}"
