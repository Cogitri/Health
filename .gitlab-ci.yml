include: "https://gitlab.gnome.org/GNOME/citemplates/raw/master/flatpak/flatpak_ci_initiative.yml"

variables:
  BUNDLE: "dev.Cogitri.Health.Devel.flatpak"
  MANIFEST_PATH: "dev.Cogitri.Health.Devel.json"
  FLATPAK_MODULE: "health"
  FLATPAK_IMAGE: "registry.gitlab.gnome.org/gnome/gnome-runtime-images/gnome:42"
  CI_IMAGE: "registry.gitlab.gnome.org/cogitri/health-ci-docker/health-ci:latest"
  TARBALL: "Health-${CI_COMMIT_TAG}.tar.xz"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/release-tarballs/${CI_COMMIT_TAG}"

stages:
  - qa
  - build
  - deploy
  - release-tarball
  - release-upload
  - release-fix-url
  - release-publish

fmt:
  image: "rust:slim"
  stage: qa
  script:
    # Create blank versions of our configured files
    # so rustfmt does not yell about non-existent files or completely empty files
    - echo -e "" >> src/config.rs
    - rustup component add rustfmt
    - rustc -Vv && cargo -Vv
    - cargo fmt --version
    - cargo fmt --all -- --color=always --check

clone:
  image: alpine:latest
  stage: qa
  script:
    - build-aux/run-clone-warn.sh

gettext_check:
  image: "$CI_IMAGE"
  stage: qa
  script:
    - source $HOME/.cargo/env
    - meson build
    - ninja -C build potfiles-in
    - git diff --quiet || (echo "Found new source files! Please run ninja -C build potfiles-in to regenerate POTFILES.in! Diff output $(git diff)" && exit 1)
    - ninja -C build dev.Cogitri.Health-update-po

clippy:
  image: "$CI_IMAGE"
  stage: build
  script:
    - source $HOME/.cargo/env
    - meson build
    - cargo clippy --version
    - cargo clippy -- -D warnings

flatpak:
  extends: ".flatpak"
  stage: build
  image: "$FLATPAK_IMAGE"
  variables:
    RUNTIME_REPO: "https://nightly.gnome.org/gnome-nightly.flatpakrepo"
    APP_ID: "dev.Cogitri.Health.Devel"

nightly:
  stage: deploy
  extends: ".publish_nightly"
  dependencies: ["flatpak"]
  needs: ["flatpak"]

pages:
  image: "$CI_IMAGE"
  stage: deploy
  script:
    - source $HOME/.cargo/env
    - meson build
    - cargo makedocs -i "health" -i "gio" -i "glib"
    - rm -rf public
    - mv target/doc/ public
  artifacts:
    paths:
      - public
  only:
    - master

create-dist-tarball:
  stage: release-tarball
  image: "$FLATPAK_IMAGE"
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - flatpak
  script:
    - flatpak-builder --keep-build-dirs --user --disable-rofiles-fuse --stop-at=${FLATPAK_MODULE} flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}
    - echo "git status; meson dist --no-tests" | flatpak-builder --disable-rofiles-fuse --build-shell=${FLATPAK_MODULE} flatpak_app ${MANIFEST_PATH}
    - mv .flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-dist tarball
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file tarball/${TARBALL} ${PACKAGE_REGISTRY_URL}/${TARBALL}

# https://gitlab.com/gitlab-org/gitlab/-/issues/271534 The default URL needs authentication right now, which is less than optimal...
# Get the package_files ID instead and use that as download URL in the "release" step.
release:
  stage: release-publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - apk add curl jq
    - |
      export PACKAGE_ID=$(curl "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages?sort=desc" | jq -c .[0].id) \
        && export PACKAGE_DOWNLOAD_ID=$(curl "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/${PACKAGE_ID}/package_files" | jq -c .[0].id) \
        && export PACKAGE_DOWNLOAD_URL="${CI_PROJECT_URL}/-/package_files/${PACKAGE_DOWNLOAD_ID}/download" \
        && release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --description "Please use the attached tarball \"${TARBALL}\", which vendors the required Rust dependencies and can be used to build Health without an internet connection." \
        --assets-link "{\"name\":\"${TARBALL}\",\"url\":\"${PACKAGE_DOWNLOAD_URL}\"}"
